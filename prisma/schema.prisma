generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  links         Link[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Link {
  id        String        @id @default(cuid())
  ln        String        @default(cuid())
  url       String
  protected Boolean       @default(false)
  createdAt DateTime      @default(now())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  acl       LinkControl[]
  logs      LinkLog?
}

model LinkControl {
  id      String  @id @default(cuid())
  passwd  String
  multi   Boolean @default(false)
  enabled Boolean @default(true)
  linkId  String
  link    Link    @relation(fields: [linkId], references: [id], onDelete: Cascade)
}

model LinkLog {
  createdAt DateTime @default(now())
  linkId    String   @unique
  link      Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
}
